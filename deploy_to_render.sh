#!/bin/bash
# Quick Render Deployment Setup Script for EmergentTrader

set -e

echo "🚀 EmergentTrader Render Deployment Setup"
echo "=========================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

print_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

# Check if we're on the render-deployment branch
current_branch=$(git branch --show-current)
if [ "$current_branch" != "render-deployment" ]; then
    print_warning "Switching to render-deployment branch..."
    git checkout render-deployment
fi

print_status "On render-deployment branch"

# Copy production files to their final locations
print_info "Setting up production configuration files..."

# Copy production package.json
if [ -f "package_production.json" ]; then
    cp package_production.json package.json
    print_status "Updated package.json for production"
fi

# Copy production next.config.js
if [ -f "next.config.production.js" ]; then
    cp next.config.production.js next.config.js
    print_status "Updated next.config.js for production"
fi

# Copy production requirements.txt
if [ -f "python_backend/requirements_production.txt" ]; then
    cp python_backend/requirements_production.txt python_backend/requirements.txt
    print_status "Updated requirements.txt for production"
fi

# Copy production main.py
if [ -f "python_backend/main_production.py" ]; then
    cp python_backend/main_production.py python_backend/main.py
    print_status "Updated main.py for production"
fi

# Create .env.production template
cat > .env.production << EOF
# Production Environment Variables for Render
# Copy these to your Render service environment variables

# Frontend Variables
NODE_ENV=production
NEXT_PUBLIC_API_URL=https://emergenttrader-backend.onrender.com
NEXT_PUBLIC_WS_URL=wss://emergenttrader-backend.onrender.com
NEXT_PUBLIC_APP_NAME=EmergentTrader
NEXT_PUBLIC_APP_VERSION=2.0.0

# Backend Variables
PYTHON_ENV=production
DATABASE_URL=postgresql://username:password@host:port/database
FRONTEND_URL=https://emergenttrader.onrender.com

# Email Configuration (Update with your details)
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USER=your-email@gmail.com
EMAIL_PASSWORD=your-app-password
NOTIFICATION_EMAIL=alerts@yourdomain.com

# Optional: Redis for caching
REDIS_URL=redis://username:password@host:port

# Security
SECRET_KEY=your-secret-key-here
JWT_SECRET=your-jwt-secret-here
EOF

print_status "Created .env.production template"

# Create deployment checklist
cat > DEPLOYMENT_CHECKLIST.md << EOF
# 🚀 Render Deployment Checklist

## Pre-Deployment Setup

### 1. Repository Setup
- [x] Created render-deployment branch
- [x] Added render.yaml configuration
- [x] Updated production configurations
- [ ] Pushed to GitHub

### 2. Render Account Setup
- [ ] Created Render account
- [ ] Connected GitHub repository
- [ ] Selected render-deployment branch

### 3. Environment Variables Setup
Copy these variables to your Render services:

#### Frontend Service (emergenttrader-frontend)
\`\`\`
NODE_ENV=production
NEXT_PUBLIC_API_URL=https://emergenttrader-backend.onrender.com
NEXT_PUBLIC_WS_URL=wss://emergenttrader-backend.onrender.com
NEXT_PUBLIC_APP_NAME=EmergentTrader
NEXT_PUBLIC_APP_VERSION=2.0.0
\`\`\`

#### Backend Service (emergenttrader-backend)
\`\`\`
PYTHON_ENV=production
DATABASE_URL=[Auto-generated by Render]
FRONTEND_URL=https://emergenttrader.onrender.com
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USER=your-email@gmail.com
EMAIL_PASSWORD=your-app-password
NOTIFICATION_EMAIL=alerts@yourdomain.com
\`\`\`

#### Cron Jobs (all 3 signal generators)
\`\`\`
PYTHON_ENV=production
DATABASE_URL=[Auto-generated by Render]
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USER=your-email@gmail.com
EMAIL_PASSWORD=your-app-password
NOTIFICATION_EMAIL=alerts@yourdomain.com
\`\`\`

## Deployment Steps

### 1. Deploy Blueprint
- [ ] Go to Render Dashboard
- [ ] Click "New +" → "Blueprint"
- [ ] Connect GitHub repository
- [ ] Select render-deployment branch
- [ ] Click "Apply"

### 2. Configure Services
- [ ] Wait for all services to build
- [ ] Verify frontend is accessible
- [ ] Check backend health endpoint
- [ ] Confirm database is connected

### 3. Test Automated Features
- [ ] Verify cron jobs are scheduled
- [ ] Test signal generation manually
- [ ] Check email notifications
- [ ] Verify WebSocket connections

## Post-Deployment Verification

### Health Checks
- [ ] Frontend: https://emergenttrader.onrender.com/
- [ ] Backend: https://emergenttrader-backend.onrender.com/health
- [ ] API Docs: https://emergenttrader-backend.onrender.com/docs

### Scheduled Jobs
- [ ] Morning scan (9 AM IST): Check logs
- [ ] Afternoon scan (2 PM IST): Check logs  
- [ ] Evening scan (6 PM IST): Check logs

### Monitoring
- [ ] Set up log monitoring
- [ ] Configure error alerts
- [ ] Monitor signal generation success rates

## Troubleshooting

If deployment fails:
1. Check build logs in Render dashboard
2. Verify all environment variables are set
3. Check database connection
4. Review application logs

## Success Criteria
- [ ] All services running (green status)
- [ ] Frontend loads without errors
- [ ] Backend API responds to requests
- [ ] Database queries work
- [ ] Scheduled jobs execute successfully
- [ ] Email notifications sent
- [ ] WebSocket connections established

Your EmergentTrader is ready for production! 🎉
EOF

print_status "Created deployment checklist"

# Commit the production setup
git add .
git commit -m "setup: Configure production files for Render deployment

- Updated package.json, next.config.js, requirements.txt, main.py for production
- Created .env.production template with all required variables
- Added deployment checklist for step-by-step setup
- Ready for Render blueprint deployment"

print_status "Committed production configuration"

# Push to remote
git push origin render-deployment

print_status "Pushed to render-deployment branch"

echo ""
echo "🎉 Render Deployment Setup Complete!"
echo "====================================="
echo ""
print_info "Next Steps:"
echo "1. Go to https://dashboard.render.com"
echo "2. Click 'New +' → 'Blueprint'"
echo "3. Connect your GitHub repository"
echo "4. Select the 'render-deployment' branch"
echo "5. Review the render.yaml configuration"
echo "6. Set up environment variables (see .env.production)"
echo "7. Click 'Apply' to deploy"
echo ""
print_info "Your app will be available at:"
echo "• Frontend: https://emergenttrader.onrender.com"
echo "• Backend: https://emergenttrader-backend.onrender.com"
echo "• API Docs: https://emergenttrader-backend.onrender.com/docs"
echo ""
print_info "Automated Signal Generation Schedule:"
echo "• 🌅 Morning Scan: 9:00 AM IST (Monday-Friday)"
echo "• ☀️ Afternoon Scan: 2:00 PM IST (Monday-Friday)"
echo "• 🌆 Evening Scan: 6:00 PM IST (Monday-Friday)"
echo ""
print_warning "Don't forget to:"
echo "• Set up your Gmail App Password for email notifications"
echo "• Update EMAIL_USER and EMAIL_PASSWORD in environment variables"
echo "• Monitor the first few scheduled runs to ensure they work correctly"
echo ""
print_status "Check DEPLOYMENT_CHECKLIST.md for detailed setup instructions!"
