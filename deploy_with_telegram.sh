#!/bin/bash
# EmergentTrader Render Deployment with Telegram Notifications

set -e

echo "🤖 EmergentTrader Deployment with Telegram Notifications"
echo "========================================================"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

print_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

print_telegram() {
    echo -e "${PURPLE}🤖 $1${NC}"
}

# Check if we're on the render-deployment branch
current_branch=$(git branch --show-current)
if [ "$current_branch" != "render-deployment" ]; then
    print_warning "Switching to render-deployment branch..."
    git checkout render-deployment
fi

print_status "On render-deployment branch"

# Update production files with Telegram support
print_info "Setting up production configuration with Telegram support..."

# Copy Telegram-enabled files
if [ -f "render_with_telegram.yaml" ]; then
    cp render_with_telegram.yaml render.yaml
    print_status "Updated render.yaml with Telegram configuration"
fi

if [ -f "python_backend/requirements_with_telegram.txt" ]; then
    cp python_backend/requirements_with_telegram.txt python_backend/requirements.txt
    print_status "Updated requirements.txt with Telegram dependencies"
fi

if [ -f "python_backend/scheduled_signal_generator_with_telegram.py" ]; then
    cp python_backend/scheduled_signal_generator_with_telegram.py python_backend/scheduled_signal_generator.py
    print_status "Updated signal generator with Telegram support"
fi

# Create comprehensive environment template
cat > .env.telegram.template << EOF
# =============================================================================
# EmergentTrader Production Environment Variables with Telegram
# =============================================================================

# Frontend Variables
NODE_ENV=production
NEXT_PUBLIC_API_URL=https://emergenttrader-backend.onrender.com
NEXT_PUBLIC_WS_URL=wss://emergenttrader-backend.onrender.com
NEXT_PUBLIC_APP_NAME=EmergentTrader
NEXT_PUBLIC_APP_VERSION=2.0.0

# Backend Variables
PYTHON_ENV=production
DATABASE_URL=postgresql://username:password@host:port/database
FRONTEND_URL=https://emergenttrader.onrender.com

# Email Configuration
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USER=your-email@gmail.com
EMAIL_PASSWORD=your-app-password
NOTIFICATION_EMAIL=alerts@yourdomain.com

# 🤖 TELEGRAM CONFIGURATION (NEW!)
TELEGRAM_BOT_TOKEN=123456789:ABCdefGHIjklMNOpqrSTUvwxYZ
TELEGRAM_CHAT_ID=123456789
TELEGRAM_CHANNEL_ID=@your_channel_or_-1001234567890

# Telegram Settings (Optional)
TELEGRAM_SEND_SCAN_START=true
TELEGRAM_SEND_SIGNAL_UPDATES=true
TELEGRAM_SEND_ERROR_ALERTS=true
TELEGRAM_MAX_SIGNALS_PER_MESSAGE=5

# Security
SECRET_KEY=your-secret-key-here
JWT_SECRET=your-jwt-secret-here
EOF

print_status "Created Telegram environment template"

# Create updated deployment checklist
cat > DEPLOYMENT_CHECKLIST_TELEGRAM.md << EOF
# 🤖 EmergentTrader Deployment Checklist with Telegram

## 📋 Pre-Deployment Setup

### 1. Repository Setup
- [x] Created render-deployment branch with Telegram support
- [x] Added Telegram service and enhanced signal generator
- [x] Updated render.yaml with Telegram environment variables
- [ ] Pushed to GitHub

### 2. Telegram Bot Setup (5 minutes)
- [ ] Message @BotFather on Telegram
- [ ] Create new bot with /newbot command
- [ ] Copy bot token
- [ ] Start chat with your bot
- [ ] Get chat ID from bot API
- [ ] Optional: Create channel and add bot as admin

### 3. Render Account Setup
- [ ] Created Render account
- [ ] Connected GitHub repository
- [ ] Selected render-deployment branch

### 4. Environment Variables Setup

#### Frontend Service (emergenttrader-frontend)
\`\`\`
NODE_ENV=production
NEXT_PUBLIC_API_URL=https://emergenttrader-backend.onrender.com
NEXT_PUBLIC_WS_URL=wss://emergenttrader-backend.onrender.com
NEXT_PUBLIC_APP_NAME=EmergentTrader
NEXT_PUBLIC_APP_VERSION=2.0.0
\`\`\`

#### Backend Service (emergenttrader-backend)
\`\`\`
PYTHON_ENV=production
DATABASE_URL=[Auto-generated by Render]
FRONTEND_URL=https://emergenttrader.onrender.com
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USER=your-email@gmail.com
EMAIL_PASSWORD=your-app-password
NOTIFICATION_EMAIL=alerts@yourdomain.com
TELEGRAM_BOT_TOKEN=your-bot-token
TELEGRAM_CHAT_ID=your-chat-id
TELEGRAM_CHANNEL_ID=@your-channel
\`\`\`

#### Cron Jobs (all 3 signal generators)
\`\`\`
PYTHON_ENV=production
DATABASE_URL=[Auto-generated by Render]
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USER=your-email@gmail.com
EMAIL_PASSWORD=your-app-password
NOTIFICATION_EMAIL=alerts@yourdomain.com
TELEGRAM_BOT_TOKEN=your-bot-token
TELEGRAM_CHAT_ID=your-chat-id
TELEGRAM_CHANNEL_ID=@your-channel
\`\`\`

## 🚀 Deployment Steps

### 1. Deploy Blueprint
- [ ] Go to Render Dashboard
- [ ] Click "New +" → "Blueprint"
- [ ] Connect GitHub repository
- [ ] Select render-deployment branch
- [ ] Click "Apply"

### 2. Configure Services
- [ ] Wait for all services to build
- [ ] Set all environment variables
- [ ] Verify frontend is accessible
- [ ] Check backend health endpoint
- [ ] Confirm database is connected

### 3. Test Telegram Integration
- [ ] Check bot responds to messages
- [ ] Verify chat ID is correct
- [ ] Test notification sending
- [ ] Confirm channel broadcasting (if used)

## 📱 Expected Telegram Notifications

### 🌅 Morning Scan (9:00 AM IST)
\`\`\`
🌅 Morning Market Scan
📅 03 Aug 2025, 09:00 IST
📈 5 Trading Signals Generated

🔥 Top Signals:

1. 🚀 RELIANCE
   📋 Strategy: Multibagger
   🎯 Confidence: 85.0%
   💰 Entry: ₹2,500.00
   🎯 Target: ₹2,750.00
   📈 Potential: +10.0%

🔍 Strategies Used:
   🚀 Multibagger
   📈 Momentum
   💥 Breakout

🌐 View Dashboard
⚠️ Disclaimer: Educational purposes only
\`\`\`

### ☀️ Afternoon Scan (2:00 PM IST)
- Swing trading signals
- Mean reversion opportunities
- Value investment picks

### 🌆 Evening Scan (6:00 PM IST)
- Sector rotation analysis
- Low volatility stocks
- Fundamental growth opportunities

### 📊 Real-time Updates
- Target hit notifications
- Stop loss alerts
- Significant price movements

## ✅ Post-Deployment Verification

### Health Checks
- [ ] Frontend: https://emergenttrader.onrender.com/
- [ ] Backend: https://emergenttrader-backend.onrender.com/health
- [ ] API Docs: https://emergenttrader-backend.onrender.com/docs

### Telegram Tests
- [ ] Bot responds to messages
- [ ] Test notification received
- [ ] Scan start notifications work
- [ ] Error alerts function properly

### Scheduled Jobs
- [ ] Morning scan (9 AM IST): Check logs and Telegram
- [ ] Afternoon scan (2 PM IST): Check logs and Telegram
- [ ] Evening scan (6 PM IST): Check logs and Telegram

## 🎯 Success Criteria
- [ ] All services running (green status)
- [ ] Frontend loads without errors
- [ ] Backend API responds to requests
- [ ] Database queries work
- [ ] Scheduled jobs execute successfully
- [ ] Email notifications sent
- [ ] Telegram notifications received
- [ ] WebSocket connections established

Your EmergentTrader with Telegram notifications is ready! 🚀📱
EOF

print_status "Created Telegram deployment checklist"

# Commit the Telegram-enabled production setup
git add .
git commit -m "setup: Configure Telegram-enabled production deployment

🤖 TELEGRAM PRODUCTION SETUP:
- Updated render.yaml with Telegram environment variables
- Enhanced requirements.txt with aiohttp for Telegram API
- Configured scheduled generator with Telegram notifications
- Created comprehensive environment template
- Added Telegram-specific deployment checklist

📱 READY FOR TELEGRAM NOTIFICATIONS:
- 3 daily scans with instant Telegram alerts
- Rich formatted messages with emojis and tables
- Real-time signal updates and error notifications
- Support for both personal chat and channel broadcasting

🚀 DEPLOYMENT READY:
- All production files configured for Telegram
- Environment variables template provided
- Step-by-step setup instructions included
- Testing and verification procedures documented"

print_status "Committed Telegram production configuration"

# Push to remote
git push origin render-deployment

print_status "Pushed to render-deployment branch"

echo ""
print_telegram "🎉 Telegram Integration Complete!"
echo "=================================="
echo ""
print_info "Your EmergentTrader now includes Telegram notifications!"
echo ""
print_telegram "📱 What you'll receive in Telegram:"
echo "• 🌅 Morning scan results (9 AM IST)"
echo "• ☀️ Afternoon scan results (2 PM IST)"  
echo "• 🌆 Evening scan results (6 PM IST)"
echo "• 📊 Real-time signal updates"
echo "• 🚨 Error alerts and system notifications"
echo ""
print_info "Next Steps:"
echo "1. 🤖 Set up your Telegram bot (see TELEGRAM_BOT_SETUP_GUIDE.md)"
echo "2. 🚀 Deploy to Render with updated configuration"
echo "3. 📱 Add Telegram environment variables"
echo "4. ✅ Test notifications"
echo ""
print_info "Deployment URLs:"
echo "• Frontend: https://emergenttrader.onrender.com"
echo "• Backend: https://emergenttrader-backend.onrender.com"
echo "• API Docs: https://emergenttrader-backend.onrender.com/docs"
echo ""
print_telegram "🎯 Your professional trading platform with instant Telegram alerts is ready!"
echo ""
print_warning "📋 Follow DEPLOYMENT_CHECKLIST_TELEGRAM.md for complete setup"
print_warning "🤖 Read TELEGRAM_BOT_SETUP_GUIDE.md for bot configuration"
